stages:
  - lint
  - test
  - build
  - update
  - deploy
  - review
  - dast
  - staging
  - canary
  - production
  - incremental rollout 10%
  - incremental rollout 25%
  - incremental rollout 50%
  - incremental rollout 100%
  - performance
  - cleanup

docker-build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - apk add nodejs-current
    - docker pull tonistiigi/binfmt:latest
    - docker run --privileged --rm tonistiigi/binfmt --uninstall qemu-*
    - docker run --privileged --rm tonistiigi/binfmt --install all
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - version=$(node -e 'console.log(require("./package.json").version)')
    - docker buildx create --use
    - docker buildx build --push --pull --platform linux/amd64,linux/arm64
     -t "${CI_REGISTRY_IMAGE}/${CI_COMMIT_BRANCH}:latest"
     -t "${CI_REGISTRY_IMAGE}/${CI_COMMIT_BRANCH}:${CI_COMMIT_SHORT_SHA}"
     -t "${CI_REGISTRY_IMAGE}/${CI_COMMIT_BRANCH}:${version}" .
    - if [ "$CI_COMMIT_BRANCH" = "master" ]; then
     docker buildx build --push --pull --platform linux/amd64,linux/arm64
     -t "${CI_REGISTRY_IMAGE}:latest"
     -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
     -t "${CI_REGISTRY_IMAGE}:${version}" .; fi;
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "dev"
      exists:
        - Dockerfile

lint:
  stage: lint
  image: node:18-alpine
  before_script:
    - apk add git
    - git checkout $CI_COMMIT_BRANCH
    - git config user.name metahkg-bot
    - git config user.email bot@metahkg.org
    - git remote set-url origin https://root:$gitlab_token@gitlab.com/$CI_PROJECT_PATH
  script:
    - yarn install
    - yarn lint
    - git commit -a -m lint || exit 0
    - git push origin $CI_COMMIT_BRANCH
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    - if: $CI_COMMIT_AUTHOR != "metahkg-bot <bot@metahkg.org>"

container_scanning:
  stage: review
  needs: [ "docker-build" ]
  variables:
    GIT_STRATEGY: fetch
    CI_APPLICATION_REPOSITORY: "$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH"
    CI_APPLICATION_TAG: $CI_COMMIT_SHORT_SHA
    CLAIR_OUTPUT: High
  artifacts:
    paths:
      - gl-container-scanning-report.json
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "dev"
      exists:
        - Dockerfile

update-api:
  image: node:18-alpine
  stage: update
  before_script:
    - apk add git wget dotnet6-targeting-pack dotnet6-sdk
    - git config --global user.name metahkg-bot
    - git config --global user.email bot@metahkg.org
    - git checkout $CI_COMMIT_BRANCH
    - git remote set-url origin "https://root:${gitlab_token}@$CI_SERVER_HOST/$CI_PROJECT_PATH"
  script:
    - cd api
    - yarn install
    - yarn generate
    - git commit -a -m "api - update from latest openapi" || (echo "nothing to commit, skipping" && exit 0)
    - git push origin $CI_COMMIT_BRANCH || exit 0
  artifacts:
    paths:
      - api/dist
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_AUTHOR != "metahkg-bot <bot@metahkg.org>" && ($CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "master")


tagging:
  image: node:18-alpine
  stage: deploy
  needs: ["update-api"]
  allow_failure: true
  before_script:
    - apk add git
    - git config --global user.name metahkg-bot
    - git config --global user.email bot@metahkg.org
    - git remote set-url origin https://root:$gitlab_token@$CI_SERVER_HOST/$CI_PROJECT_PATH.git || git remote add origin https://root:$gitlab_token@$CI_SERVER_HOST/$CI_PROJECT_PATH.git
    - git checkout $CI_COMMIT_BRANCH
    - git pull origin $CI_COMMIT_BRANCH
  script:
    - tag=$(node -e "console.log(require('./package.json').version)")
    - if [ $CI_COMMIT_BRANCH = "dev" ]; then tag=${tag}-dev; fi;
    - git tag "$tag"
    - git push origin $tag
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_AUTHOR != "metahkg-bot <bot@metahkg.org>" && ($CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "master")
      changes:
        - package.json

publish-api:
  image: node:18-alpine
  stage: deploy
  allow_failure: true
  script:
    - cd api
    - yarn install
    - yarn lint
    - yarn build
    - echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' >> .npmrc
    - NPM_PACKAGE_ORIGINAL_VERSION=$(node -p "require('./package.json').version")
    - NPM_PACKAGE_VERSION=$CI_COMMIT_TAG
    - sed -i "s/${NPM_PACKAGE_ORIGINAL_VERSION}/${NPM_PACKAGE_VERSION}/" package.json
    - if [ "$CI_COMMIT_TAG" = "${NPM_PACKAGE_ORIGINAL_VERSION}-dev" ]; then npm publish --tag dev --access=public; else npm publish --access=public; fi;
    - echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}">.npmrc
    - if [ "$CI_COMMIT_TAG" = "${NPM_PACKAGE_ORIGINAL_VERSION}-dev" ]; then npm publish --tag dev --access=public; else npm publish --access=public; fi;
  rules:
    - if: "$CI_COMMIT_TAG"

build:
  stage: build
  retry: 2

sast:
  stage: test
  rules:
    - if: $CI_COMMIT_TAG
      when: never

test:
  stage: test
  rules:
     - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
     - if: $CI_COMMIT_TAG
     - if: $CI_COMMIT_BRANCH

code_quality:
  stage: test
  rules:
     - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
     - if: $CI_COMMIT_TAG
     - if: $CI_COMMIT_BRANCH

include:
  - template: Auto-DevOps.gitlab-ci.yml
