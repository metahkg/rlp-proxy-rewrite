//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from "axios";
import type {
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  CancelToken,
} from "axios";

export class Client {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.instance.defaults.transformResponse = [];

    this.baseUrl =
      baseUrl !== undefined && baseUrl !== null
        ? baseUrl
        : "https://rlp.metahkg.org";
  }

  /**
   * Get metadata of a url
   * @param url The requested url (must be a valid https/http URL), UTF-8 encoded, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
   * @return Success
   */
  getMetadata(
    url: string,
    cancelToken?: CancelToken | undefined
  ): Promise<Anonymous> {
    let url_ = this.baseUrl + "/?";
    if (url === undefined || url === null)
      throw new Error(
        "The parameter 'url' must be defined and cannot be null."
      );
    else url_ += "url=" + encodeURIComponent("" + url) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetMetadata(_response);
      });
  }

  protected processGetMetadata(response: AxiosResponse): Promise<Anonymous> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = JSON.parse(resultData200);
      return Promise.resolve<Anonymous>(result200);
    } else if (status === 400) {
      const _responseText = response.data;
      let result400: any = null;
      let resultData400 = _responseText;
      result400 = JSON.parse(resultData400);
      return throwException(
        "Bad request",
        status,
        _responseText,
        _headers,
        result400
      );
    } else if (status === 429) {
      const _responseText = response.data;
      let result429: any = null;
      let resultData429 = _responseText;
      result429 = JSON.parse(resultData429);
      return throwException(
        "Rate limit exceeded",
        status,
        _responseText,
        _headers,
        result429
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<Anonymous>(null as any);
  }

  /**
   * Alias of `getMetadata`
   * @param url The requested url (must be a valid https/http URL), UTF-8 encoded, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
   * @return Success
   */
  getMetadataV2(
    url: string,
    cancelToken?: CancelToken | undefined
  ): Promise<Anonymous> {
    let url_ = this.baseUrl + "/v2?";
    if (url === undefined || url === null)
      throw new Error(
        "The parameter 'url' must be defined and cannot be null."
      );
    else url_ += "url=" + encodeURIComponent("" + url) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetMetadataV2(_response);
      });
  }

  protected processGetMetadataV2(response: AxiosResponse): Promise<Anonymous> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = JSON.parse(resultData200);
      return Promise.resolve<Anonymous>(result200);
    } else if (status === 400) {
      const _responseText = response.data;
      let result400: any = null;
      let resultData400 = _responseText;
      result400 = JSON.parse(resultData400);
      return throwException(
        "Bad request",
        status,
        _responseText,
        _headers,
        result400
      );
    } else if (status === 429) {
      const _responseText = response.data;
      let result429: any = null;
      let resultData429 = _responseText;
      result429 = JSON.parse(resultData429);
      return throwException(
        "Rate limit exceeded",
        status,
        _responseText,
        _headers,
        result429
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<Anonymous>(null as any);
  }
}

export interface Metadata {
  /** title of the site */
  title: string | null;
  /** description of the site */
  description: string | null;
  /** image url of the site */
  image: string | null;
  /** site name of the site */
  siteName: string | null;
  /** hostname of the site (e.g. `metahkg.org`) */
  hostname: string | null;
}

export interface ErrorDto {
  /** http status code */
  statusCode: number;
  /** error message */
  error: string;
  /** detailed error message */
  message?: string;
}

export interface Anonymous {
  metadata: Metadata | null;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj?: any): obj is AxiosError {
  return obj && obj.isAxiosError === true;
}
